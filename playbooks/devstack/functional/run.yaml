- hosts: all
  name: Job for functional tests
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          set -e
          set -x
          cat > clonemap.yaml << EOF
          clonemap:
            - name: openstack-infra/devstack-gate
              dest: devstack-gate
          EOF
          /usr/zuul-env/bin/zuul-cloner -m clonemap.yaml --cache-dir /opt/git \
              git://git.openstack.org \
              openstack-infra/devstack-gate
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'

    - shell:
        cmd: |
          set -e
          set -x
          export PYTHONUNBUFFERED=true
          export DEVSTACK_GATE_NEUTRON=1
          export DEVSTACK_GATE_TEMPEST=1
          export DEVSTACK_GATE_TEMPEST_NOTESTS=1
          export DEVSTACK_GATE_EXERCISES=0
          export DEVSTACK_GATE_INSTALL_TESTONLY=1
          export DEVSTACK_PROJECT_FROM_GIT=python-heatclient
          export KEEP_LOCALRC=1

          export NUAGE_OS_RELEASE=${ZUUL_BRANCH#*/}
          if [ -f /etc/ci/vsp_info.sh ]; then
              source /etc/ci/vsp_info.sh
          fi

          if [ "{{ branch_override }}" != "default" ] ; then
              export OVERRIDE_ZUUL_BRANCH=$BRANCH_OVERRIDE
              export NUAGE_OS_RELEASE=${OVERRIDE_ZUUL_BRANCH#*/}
          fi
          export DISABLE_CONVERGENCE="{{ disable_convergence }}"
          export VSP_RELEASE={{ nuage_vsp_release }}
          export DEVSTACK_GATE_TOPOLOGY=aio

          # we will attempt to use cloned upper-contraints.txt
          # prepared by zuul
          export UPPER_CONSTRAINTS_FILE=/opt/stack/new/requirements/upper-constraints.txt

          # by default devstack-gate will include bunch of projects
          # we dont actually need. We ovewrite project list here
          PROJECTS="openstack-infra/devstack-gate"
          PROJECTS="openstack-dev/devstack $PROJECTS"
          PROJECTS="openstack/cinder $PROJECTS"
          PROJECTS="openstack/glance $PROJECTS"
          PROJECTS="openstack/heat $PROJECTS"
          PROJECTS="openstack/heat-tempest-plugin $PROJECTS"
          PROJECTS="openstack/keystone $PROJECTS"
          PROJECTS="openstack/neutron $PROJECTS"
          PROJECTS="openstack/oslo.messaging $PROJECTS"
          PROJECTS="openstack/python-heatclient $PROJECTS"
          PROJECTS="openstack/nova $PROJECTS"
          PROJECTS="openstack/requirements $PROJECTS"
          PROJECTS="openstack/tempest $PROJECTS"

          PROJECTS="OpenStack/nuage-gate-utils $PROJECTS"
          PROJECTS="OpenStack/nuage-heat $PROJECTS"
          PROJECTS="OpenStack/nuage-openstack-neutron $PROJECTS"
          PROJECTS="OpenStack/nuage-openstack-neutronclient $PROJECTS"
          PROJECTS="OpenStack/nuage-tempest-plugin $PROJECTS"
          export DEVSTACK_GATE_PROJECTS_OVERRIDE="$PROJECTS"

          # get own ip and derrive cidr for public net from it,
          # to avoid overlap on VSD by multiple gate hosts
          OWN_IP=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
          group=$(echo ${OWN_IP} | awk -F.  '{print $3}')
          GW="172.${group}.${OWN_IP##*.}.1"
          export DEVSTACK_GATE_FLOATING_RANGE="172.${group}.${OWN_IP##*.}.0/24"
          export DEVSTACK_GATE_PUBLIC_NETWORK_GATEWAY="${GW}"

          # add own address and VSD ip to no proxy
          export no_proxy=$no_proxy,${PRIMARY_IP},${VSD_SERVER%%:*}

          function pre_test_hook {
              sudo -H pip install -c $UPPER_CONSTRAINTS_FILE stestr
          }
          export -f pre_test_hook

          function gate_hook {
              bash -xe $BASE/new/nuage-heat/devstack/ci/gate_hook.sh
          }
          export -f gate_hook

          function post_test_hook {
              bash -xe $BASE/new/nuage-heat/devstack/ci/post_test_hook.sh
          }
          export -f post_test_hook

          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
