heat_template_version: 2015-04-30
description: >
  Simple template to create server in new NetPartition/Router/Network with FIPs


parameters:
  netpartition_name:
    type: string
    label: NetPartition Name
    description: Name of netpartition to create
  rd:
    type: string
    label: Route Distinguisher
    description: Route Distinguisher for new L3 Domain
  rt:
    type: string
    label: Route Target
    description: Route Target for new L3 Domain
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers

resources:
  netpartition:
    type: Nuage::Neutron::Netpartition
    properties:
        name: { get_param: netpartition_name }

  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }
      value_specs: { net_partition: { get_resource: netpartition }}

  router:
    type: OS::Neutron::Router
    properties:
        name: R1
        external_gateway_info:
          network: { get_param: public_net }
        value_specs: { net_partition: { get_resource: netpartition }, rd: { get_param: rd }, rt: { get_param: rt } }


  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  vm1:
    type: OS::Nova::Server
    properties:
      name: Vm1
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: vm1_port }

  vm1_port:
    type: OS::Neutron::Port
    depends_on: router_interface
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: vm_security_group }]

  vm1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: vm1_port }

  vm_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp


outputs:
  vm1_private_ip:
    description: IP address of server in private network
    value: { get_attr: [ vm1, first_address ] }
  vm1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ vm1_floating_ip, floating_ip_address ] }
